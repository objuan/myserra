/**
 * @file       BlynkHandlers.h
 * @author     Volodymyr Shymanskyy
 * @license    This project is released under the MIT License (MIT)
 * @copyright  Copyright (c) 2015 Volodymyr Shymanskyy
 * @date       Jan 2015
 * @brief      Handlers for virtual pin operations
 *
 */
/*
#ifndef VirtualHandlers_h
#define VirtualHandlers_h


#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkParam.h>

#define VIRTUAL_UNUSED BLYNK_UNUSED

// Initial syntax:
#define VIRTUAL_WRITE_2(pin) \
    void VirtualWrite ## pin (VirtualReq VIRTUAL_UNUSED &request, const BlynkParam VIRTUAL_UNUSED &param)

#define VIRTUAL_READ_2(pin)  \
    void VirtualRead ## pin  (VirtualReq VIRTUAL_UNUSED &request)

#define VIRTUAL_WRITE_DEFAULT() VIRTUAL_WRITE_2(Default)
#define VIRTUAL_READ_DEFAULT()  VIRTUAL_READ_2(Default)

#define VIRTUAL_WRITE(pin)      VIRTUAL_WRITE_2(pin)
#define VIRTUAL_READ(pin)       VIRTUAL_READ_2(pin)

// New, more readable syntax:
#define VIRTUAL_IN_2(pin)  \
    void VirtualWrite ## pin (VirtualReq VIRTUAL_UNUSED &request, const BlynkParam VIRTUAL_UNUSED &getValue)

#define VIRTUAL_OUT_2(pin) \
    void VirtualRead ## pin  (VirtualReq VIRTUAL_UNUSED &request)

#define VIRTUAL_INPUT_DEFAULT()   VIRTUAL_IN_2(Default)
#define VIRTUAL_OUTPUT_DEFAULT()  VIRTUAL_OUT_2(Default)

#define VIRTUAL_INPUT(pin)        VIRTUAL_IN_2(pin)
#define VIRTUAL_OUTPUT(pin)       VIRTUAL_OUT_2(pin)

// Additional handlers
#define VIRTUAL_CONNECTED()    void BlynkOnConnected()
#define VIRTUAL_DISCONNECTED() void BlynkOnDisconnected()

// Advanced functions

#define VIRTUAL_VAR_INT(name, pin) \
    int name;  \
    VIRTUAL_WRITE(pin) { name = param.asInt(); } \
    VIRTUAL_READ(pin)  { Blynk.virtualWrite(pin, name); }

#define VIRTUAL_VAR_LONG(name, pin) \
    long name;  \
    VIRTUAL_WRITE(pin) { name = param.asLong(); } \
    VIRTUAL_READ(pin)  { Blynk.virtualWrite(pin, name); }

#ifndef VIRTUAL_NO_FLOAT
#define VIRTUAL_VAR_DOUBLE(name, pin) \
    double name;  \
    VIRTUAL_WRITE(pin) { name = param.asDouble(); } \
    VIRTUAL_READ(pin)  { Blynk.virtualWrite(pin, name); }
#endif

#ifdef ARDUINO
#define VIRTUAL_VAR_STRING(name, pin) \
    String name;  \
    VIRTUAL_WRITE(pin) { name = param.asStr(); } \
    VIRTUAL_READ(pin)  { Blynk.virtualWrite(pin, name); }
#endif

// Default read/write handlers (you can redefine them in your code)
#ifdef __cplusplus
extern "C" {
#endif

struct VirtualReq
{
    uint8_t pin;
};

typedef void (*VirtualReadHandler)(VirtualReq VIRTUAL_UNUSED &request);
typedef void (*VirtualWriteHandler)(VirtualReq VIRTUAL_UNUSED &request, const BlynkParam VIRTUAL_UNUSED &param);

VirtualReadHandler GetVReadHandler(uint8_t pin);
VirtualWriteHandler GetVWriteHandler(uint8_t pin);

// Declare placeholders
VIRTUAL_READ();
VIRTUAL_WRITE();
void VirtualNoOpCbk();

// Declare all pin handlers (you can redefine them in your code)
VIRTUAL_CONNECTED();
VIRTUAL_DISCONNECTED();

// Internal Virtual Pins
VIRTUAL_WRITE(InternalPinACON);
VIRTUAL_WRITE(InternalPinADIS);
VIRTUAL_WRITE(InternalPinRTC);
VIRTUAL_WRITE(InternalPinUTC);
VIRTUAL_WRITE(InternalPinOTA);
VIRTUAL_WRITE(InternalPinMETA);

// Aliases
#define VIRTUAL_APP_CONNECTED()    VIRTUAL_WRITE(InternalPinACON)
#define VIRTUAL_APP_DISCONNECTED() VIRTUAL_WRITE(InternalPinADIS)

// Regular Virtual Pins
VIRTUAL_READ_DEFAULT();
VIRTUAL_WRITE_DEFAULT();

VIRTUAL_READ(0 );
VIRTUAL_READ(1 );
VIRTUAL_READ(2 );
VIRTUAL_READ(3 );
VIRTUAL_READ(4 );
VIRTUAL_READ(5 );
VIRTUAL_READ(6 );
VIRTUAL_READ(7 );
VIRTUAL_READ(8 );
VIRTUAL_READ(9 );
VIRTUAL_READ(10);
VIRTUAL_READ(11);
VIRTUAL_READ(12);
VIRTUAL_READ(13);
VIRTUAL_READ(14);
VIRTUAL_READ(15);
VIRTUAL_READ(16);
VIRTUAL_READ(17);
VIRTUAL_READ(18);
VIRTUAL_READ(19);
VIRTUAL_READ(20);
VIRTUAL_READ(21);
VIRTUAL_READ(22);
VIRTUAL_READ(23);
VIRTUAL_READ(24);
VIRTUAL_READ(25);
VIRTUAL_READ(26);
VIRTUAL_READ(27);
VIRTUAL_READ(28);
VIRTUAL_READ(29);
VIRTUAL_READ(30);
VIRTUAL_READ(31);

  VIRTUAL_READ(32);
  VIRTUAL_READ(33);
  VIRTUAL_READ(34);
  VIRTUAL_READ(35);
  VIRTUAL_READ(36);
  VIRTUAL_READ(37);
  VIRTUAL_READ(38);
  VIRTUAL_READ(39);
  VIRTUAL_READ(40);
  VIRTUAL_READ(41);
  VIRTUAL_READ(42);
  VIRTUAL_READ(43);
  VIRTUAL_READ(44);
  VIRTUAL_READ(45);
  VIRTUAL_READ(46);
  VIRTUAL_READ(47);
  VIRTUAL_READ(48);
  VIRTUAL_READ(49);
  VIRTUAL_READ(50);
  VIRTUAL_READ(51);
  VIRTUAL_READ(52);
  VIRTUAL_READ(53);
  VIRTUAL_READ(54);
  VIRTUAL_READ(55);
  VIRTUAL_READ(56);
  VIRTUAL_READ(57);
  VIRTUAL_READ(58);
  VIRTUAL_READ(59);
  VIRTUAL_READ(60);
  VIRTUAL_READ(61);
  VIRTUAL_READ(62);
  VIRTUAL_READ(63);
  VIRTUAL_READ(64);
  VIRTUAL_READ(65);
  VIRTUAL_READ(66);
  VIRTUAL_READ(67);
  VIRTUAL_READ(68);
  VIRTUAL_READ(69);
  VIRTUAL_READ(70);
  VIRTUAL_READ(71);
  VIRTUAL_READ(72);
  VIRTUAL_READ(73);
  VIRTUAL_READ(74);
  VIRTUAL_READ(75);
  VIRTUAL_READ(76);
  VIRTUAL_READ(77);
  VIRTUAL_READ(78);
  VIRTUAL_READ(79);
  VIRTUAL_READ(80);
  VIRTUAL_READ(81);
  VIRTUAL_READ(82);
  VIRTUAL_READ(83);
  VIRTUAL_READ(84);
  VIRTUAL_READ(85);
  VIRTUAL_READ(86);
  VIRTUAL_READ(87);
  VIRTUAL_READ(88);
  VIRTUAL_READ(89);
  VIRTUAL_READ(90);
  VIRTUAL_READ(91);
  VIRTUAL_READ(92);
  VIRTUAL_READ(93);
  VIRTUAL_READ(94);
  VIRTUAL_READ(95);
  VIRTUAL_READ(96);
  VIRTUAL_READ(97);
  VIRTUAL_READ(98);
  VIRTUAL_READ(99);
  VIRTUAL_READ(100);
  VIRTUAL_READ(101);
  VIRTUAL_READ(102);
  VIRTUAL_READ(103);
  VIRTUAL_READ(104);
  VIRTUAL_READ(105);
  VIRTUAL_READ(106);
  VIRTUAL_READ(107);
  VIRTUAL_READ(108);
  VIRTUAL_READ(109);
  VIRTUAL_READ(110);
  VIRTUAL_READ(111);
  VIRTUAL_READ(112);
  VIRTUAL_READ(113);
  VIRTUAL_READ(114);
  VIRTUAL_READ(115);
  VIRTUAL_READ(116);
  VIRTUAL_READ(117);
  VIRTUAL_READ(118);
  VIRTUAL_READ(119);
  VIRTUAL_READ(120);
  VIRTUAL_READ(121);
  VIRTUAL_READ(122);
  VIRTUAL_READ(123);
  VIRTUAL_READ(124);
  VIRTUAL_READ(125);
  VIRTUAL_READ(126);
  VIRTUAL_READ(127);


VIRTUAL_WRITE(0 );
VIRTUAL_WRITE(1 );
VIRTUAL_WRITE(2 );
VIRTUAL_WRITE(3 );
VIRTUAL_WRITE(4 );
VIRTUAL_WRITE(5 );
VIRTUAL_WRITE(6 );
VIRTUAL_WRITE(7 );
VIRTUAL_WRITE(8 );
VIRTUAL_WRITE(9 );
VIRTUAL_WRITE(10);
VIRTUAL_WRITE(11);
VIRTUAL_WRITE(12);
VIRTUAL_WRITE(13);
VIRTUAL_WRITE(14);
VIRTUAL_WRITE(15);
VIRTUAL_WRITE(16);
VIRTUAL_WRITE(17);
VIRTUAL_WRITE(18);
VIRTUAL_WRITE(19);
VIRTUAL_WRITE(20);
VIRTUAL_WRITE(21);
VIRTUAL_WRITE(22);
VIRTUAL_WRITE(23);
VIRTUAL_WRITE(24);
VIRTUAL_WRITE(25);
VIRTUAL_WRITE(26);
VIRTUAL_WRITE(27);
VIRTUAL_WRITE(28);
VIRTUAL_WRITE(29);
VIRTUAL_WRITE(30);
VIRTUAL_WRITE(31);

  VIRTUAL_WRITE(32);
  VIRTUAL_WRITE(33);
  VIRTUAL_WRITE(34);
  VIRTUAL_WRITE(35);
  VIRTUAL_WRITE(36);
  VIRTUAL_WRITE(37);
  VIRTUAL_WRITE(38);
  VIRTUAL_WRITE(39);
  VIRTUAL_WRITE(40);
  VIRTUAL_WRITE(41);
  VIRTUAL_WRITE(42);
  VIRTUAL_WRITE(43);
  VIRTUAL_WRITE(44);
  VIRTUAL_WRITE(45);
  VIRTUAL_WRITE(46);
  VIRTUAL_WRITE(47);
  VIRTUAL_WRITE(48);
  VIRTUAL_WRITE(49);
  VIRTUAL_WRITE(50);
  VIRTUAL_WRITE(51);
  VIRTUAL_WRITE(52);
  VIRTUAL_WRITE(53);
  VIRTUAL_WRITE(54);
  VIRTUAL_WRITE(55);
  VIRTUAL_WRITE(56);
  VIRTUAL_WRITE(57);
  VIRTUAL_WRITE(58);
  VIRTUAL_WRITE(59);
  VIRTUAL_WRITE(60);
  VIRTUAL_WRITE(61);
  VIRTUAL_WRITE(62);
  VIRTUAL_WRITE(63);
  VIRTUAL_WRITE(64);
  VIRTUAL_WRITE(65);
  VIRTUAL_WRITE(66);
  VIRTUAL_WRITE(67);
  VIRTUAL_WRITE(68);
  VIRTUAL_WRITE(69);
  VIRTUAL_WRITE(70);
  VIRTUAL_WRITE(71);
  VIRTUAL_WRITE(72);
  VIRTUAL_WRITE(73);
  VIRTUAL_WRITE(74);
  VIRTUAL_WRITE(75);
  VIRTUAL_WRITE(76);
  VIRTUAL_WRITE(77);
  VIRTUAL_WRITE(78);
  VIRTUAL_WRITE(79);
  VIRTUAL_WRITE(80);
  VIRTUAL_WRITE(81);
  VIRTUAL_WRITE(82);
  VIRTUAL_WRITE(83);
  VIRTUAL_WRITE(84);
  VIRTUAL_WRITE(85);
  VIRTUAL_WRITE(86);
  VIRTUAL_WRITE(87);
  VIRTUAL_WRITE(88);
  VIRTUAL_WRITE(89);
  VIRTUAL_WRITE(90);
  VIRTUAL_WRITE(91);
  VIRTUAL_WRITE(92);
  VIRTUAL_WRITE(93);
  VIRTUAL_WRITE(94);
  VIRTUAL_WRITE(95);
  VIRTUAL_WRITE(96);
  VIRTUAL_WRITE(97);
  VIRTUAL_WRITE(98);
  VIRTUAL_WRITE(99);
  VIRTUAL_WRITE(100);
  VIRTUAL_WRITE(101);
  VIRTUAL_WRITE(102);
  VIRTUAL_WRITE(103);
  VIRTUAL_WRITE(104);
  VIRTUAL_WRITE(105);
  VIRTUAL_WRITE(106);
  VIRTUAL_WRITE(107);
  VIRTUAL_WRITE(108);
  VIRTUAL_WRITE(109);
  VIRTUAL_WRITE(110);
  VIRTUAL_WRITE(111);
  VIRTUAL_WRITE(112);
  VIRTUAL_WRITE(113);
  VIRTUAL_WRITE(114);
  VIRTUAL_WRITE(115);
  VIRTUAL_WRITE(116);
  VIRTUAL_WRITE(117);
  VIRTUAL_WRITE(118);
  VIRTUAL_WRITE(119);
  VIRTUAL_WRITE(120);
  VIRTUAL_WRITE(121);
  VIRTUAL_WRITE(122);
  VIRTUAL_WRITE(123);
  VIRTUAL_WRITE(124);
  VIRTUAL_WRITE(125);
  VIRTUAL_WRITE(126);
  VIRTUAL_WRITE(127);


#ifdef __cplusplus
}
#endif

#endif
*/
